/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module ball_10 (
    input clk,
    input rst,
    input [4:0] i_x,
    input [4:0] i_y,
    input left,
    input right,
    input up,
    input down,
    input [10:0] x,
    input [10:0] y,
    input [159:0] grid,
    input i_animate,
    input on,
    input reset,
    output reg red,
    output reg green,
    output reg blue,
    output reg active,
    output reg moving
  );
  
  
  
  wire [16-1:0] M_alu_out_a;
  wire [16-1:0] M_alu_out_b;
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_zOut;
  wire [1-1:0] M_alu_vOut;
  wire [1-1:0] M_alu_nOut;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_57 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out_a(M_alu_out_a),
    .out_b(M_alu_out_b),
    .alu(M_alu_alu),
    .zOut(M_alu_zOut),
    .vOut(M_alu_vOut),
    .nOut(M_alu_nOut)
  );
  
  reg [4:0] M_currentx_d, M_currentx_q = 5'h1f;
  reg [4:0] M_currenty_d, M_currenty_q = 5'h1f;
  reg M_pixel_reg_d, M_pixel_reg_q = 1'h0;
  localparam IDLE_state = 3'd0;
  localparam LEFT_state = 3'd1;
  localparam RIGHT_state = 3'd2;
  localparam UP_state = 3'd3;
  localparam DOWN_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  reg [10:0] start_x;
  
  reg [10:0] start_y;
  
  reg [4:0] sq_fig_x;
  
  reg [4:0] sq_fig_y;
  
  reg [399:0] sq_figure;
  
  reg pixel_tick;
  
  wire [11-1:0] M_umovingsquare_o_x1;
  wire [11-1:0] M_umovingsquare_o_x2;
  wire [11-1:0] M_umovingsquare_o_y1;
  wire [11-1:0] M_umovingsquare_o_y2;
  singleunmovingsquare_58 umovingsquare (
    .i_x(start_x),
    .i_y(start_y),
    .o_x1(M_umovingsquare_o_x1),
    .o_x2(M_umovingsquare_o_x2),
    .o_y1(M_umovingsquare_o_y1),
    .o_y2(M_umovingsquare_o_y2)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_pixel_reg_d = M_pixel_reg_q;
    M_currentx_d = M_currentx_q;
    M_currenty_d = M_currenty_q;
    
    M_pixel_reg_d = ~M_pixel_reg_q;
    pixel_tick = (M_pixel_reg_q == 1'h0);
    red = 1'h0;
    green = 1'h0;
    blue = 1'h0;
    active = 1'h0;
    moving = on;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 6'h18;
    sq_figure[0+0+19-:20] = 20'h00000;
    sq_figure[20+0+19-:20] = 20'h01f00;
    sq_figure[40+0+19-:20] = 20'h07fc0;
    sq_figure[60+0+19-:20] = 20'h1fff0;
    sq_figure[80+0+19-:20] = 20'h3fff8;
    sq_figure[100+0+19-:20] = 20'h3fff8;
    sq_figure[120+0+19-:20] = 20'h7fffc;
    sq_figure[140+0+19-:20] = 20'h7fffc;
    sq_figure[160+0+19-:20] = 20'hffffe;
    sq_figure[180+0+19-:20] = 20'hffffe;
    sq_figure[200+0+19-:20] = 20'hffffe;
    sq_figure[220+0+19-:20] = 20'hffffe;
    sq_figure[240+0+19-:20] = 20'hffffe;
    sq_figure[260+0+19-:20] = 20'h7fffc;
    sq_figure[280+0+19-:20] = 20'h7fffc;
    sq_figure[300+0+19-:20] = 20'h3fff8;
    sq_figure[320+0+19-:20] = 20'h3fff8;
    sq_figure[340+0+19-:20] = 20'h1fff0;
    sq_figure[360+0+19-:20] = 20'h07fc0;
    sq_figure[380+0+19-:20] = 20'h01f00;
    
    case (M_state_q)
      IDLE_state: begin
        M_alu_a = M_currentx_q == 5'h1f;
        M_alu_b = M_currenty_q == 5'h1f;
        M_alu_alufn = 6'h18;
        if (M_alu_alu) begin
          M_currentx_d = i_x;
          M_currenty_d = i_y;
        end else begin
          M_currentx_d = M_currentx_q;
          M_currenty_d = M_currenty_q;
        end
        if (on) begin
          if (left) begin
            M_state_d = LEFT_state;
          end
          if (right) begin
            M_state_d = RIGHT_state;
          end
          if (up) begin
            M_state_d = UP_state;
          end
          if (down) begin
            M_state_d = DOWN_state;
          end
        end
      end
      LEFT_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1) begin
          if (M_currentx_q == 1'h0 && grid[(M_currenty_q)*16+15+0-:1] == 1'h0) begin
            M_currentx_d = 4'hf;
            M_currenty_d = M_currenty_q;
          end else begin
            if (grid[(M_currenty_q)*16+((M_currentx_q - 1'h1))*1+0-:1] == 1'h0) begin
              M_alu_a = M_currentx_q;
              M_alu_b = 1'h1;
              M_alu_alufn = 6'h01;
              M_currentx_d = M_alu_alu;
              M_currenty_d = M_currenty_q;
            end else begin
              M_state_d = IDLE_state;
            end
          end
        end
      end
      RIGHT_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1) begin
          if (M_currentx_q == 4'hf && grid[(M_currenty_q)*16+0+0-:1] == 1'h0) begin
            M_currentx_d = 1'h0;
            M_currenty_d = M_currenty_q;
          end else begin
            if (grid[(M_currenty_q)*16+((M_currentx_q + 1'h1))*1+0-:1] == 1'h0) begin
              M_alu_a = M_currentx_q;
              M_alu_b = 1'h1;
              M_alu_alufn = 6'h00;
              M_currentx_d = (M_alu_alu);
              M_currenty_d = M_currenty_q;
            end else begin
              M_state_d = IDLE_state;
            end
          end
        end
      end
      UP_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1) begin
          if (M_currenty_q == 1'h0 && grid[144+(M_currentx_q)*1+0-:1] == 1'h0) begin
            M_currentx_d = M_currentx_q;
            M_currenty_d = 4'h9;
          end else begin
            if (grid[(M_currenty_q - 1'h1)*16+(M_currentx_q)*1+0-:1] == 1'h0) begin
              M_alu_a = M_currenty_q;
              M_alu_b = 1'h1;
              M_alu_alufn = 6'h01;
              M_currentx_d = M_currentx_q;
              M_currenty_d = M_alu_alu;
            end else begin
              M_state_d = IDLE_state;
            end
          end
        end
      end
      DOWN_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1) begin
          if (M_currenty_q == 4'h9 && grid[0+(M_currentx_q)*1+0-:1] == 1'h0) begin
            M_currentx_d = M_currentx_q;
            M_currenty_d = 1'h0;
          end else begin
            if (grid[(M_currenty_q + 1'h1)*16+(M_currentx_q)*1+0-:1] == 1'h0) begin
              M_alu_a = M_currenty_q;
              M_alu_b = 1'h1;
              M_alu_alufn = 6'h00;
              M_currentx_d = M_currentx_q;
              M_currenty_d = M_alu_alu;
            end else begin
              M_state_d = IDLE_state;
            end
          end
        end
      end
    endcase
    if (reset) begin
      M_currentx_d = i_x;
      M_currenty_d = i_y;
      M_state_d = IDLE_state;
    end
    start_x = 5'h13 + M_currentx_q * 6'h28;
    start_y = 5'h13 + M_currenty_q * 6'h28;
    sq_fig_x = x - M_umovingsquare_o_x1 - 1'h1;
    sq_fig_y = y - M_umovingsquare_o_y1 - 1'h1;
    if (x > M_umovingsquare_o_x1 && x <= M_umovingsquare_o_x2 && y > M_umovingsquare_o_y1 && y <= M_umovingsquare_o_y2) begin
      if (sq_figure[(sq_fig_y)*20+(sq_fig_x)*1+0-:1] == 1'h1) begin
        if (on) begin
          red = 1'h0;
          green = 1'h0;
          blue = 1'h1;
          active = 1'h1;
        end else begin
          red = 1'h0;
          green = 1'h1;
          blue = 1'h0;
          active = 1'h1;
        end
      end else begin
        red = 1'h0;
        green = 1'h0;
        blue = 1'h0;
        active = 1'h0;
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_currentx_q <= 5'h1f;
      M_currenty_q <= 5'h1f;
      M_pixel_reg_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_currentx_q <= M_currentx_d;
      M_currenty_q <= M_currenty_d;
      M_pixel_reg_q <= M_pixel_reg_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule

/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module level4_7 (
    input clk,
    input rst,
    input left,
    input right,
    input up,
    input down,
    input [10:0] x,
    input [10:0] y,
    input i_animate,
    input on,
    input change_ball,
    output reg r,
    output reg g,
    output reg b,
    output reg pass
  );
  
  
  
  reg pixel_tick;
  
  reg [159:0] grid_input;
  
  reg star_r;
  reg star_g;
  reg star_b;
  
  reg star1_r;
  reg star1_g;
  reg star1_b;
  
  reg star2_r;
  reg star2_g;
  reg star2_b;
  
  reg star3_r;
  reg star3_g;
  reg star3_b;
  
  reg star4_r;
  reg star4_g;
  reg star4_b;
  
  reg expanding_square_r;
  reg expanding_square_g;
  reg expanding_square_b;
  
  reg expanding_square1_r;
  reg expanding_square1_g;
  reg expanding_square1_b;
  
  reg expanding_square2_r;
  reg expanding_square2_g;
  reg expanding_square2_b;
  
  reg ball_r;
  reg ball_g;
  reg ball_b;
  
  reg ball1_r;
  reg ball1_g;
  reg ball1_b;
  
  reg ball2_r;
  reg ball2_g;
  reg ball2_b;
  
  reg M_pixel_reg_d, M_pixel_reg_q = 1'h0;
  reg [159:0] M_grid_change_d, M_grid_change_q = 1'h0;
  reg [1:0] M_collision_d, M_collision_q = 1'h0;
  reg [1:0] M_collision1_d, M_collision1_q = 1'h0;
  reg [1:0] M_collision2_d, M_collision2_q = 1'h0;
  reg [1:0] M_collision3_d, M_collision3_q = 1'h0;
  reg [1:0] M_collision4_d, M_collision4_q = 1'h0;
  reg [2:0] M_stars_d, M_stars_q = 1'h0;
  reg M_expandingcollision_d, M_expandingcollision_q = 1'h0;
  reg M_expandingcollision1_d, M_expandingcollision1_q = 1'h0;
  reg M_expandingcollision2_d, M_expandingcollision2_q = 1'h0;
  reg [23:0] M_counter_d, M_counter_q = 1'h0;
  reg [2:0] M_current_ball_d, M_current_ball_q = 1'h0;
  reg [1:0] M_ball01_collision_d, M_ball01_collision_q = 1'h0;
  reg [1:0] M_ball02_collision_d, M_ball02_collision_q = 1'h0;
  reg [1:0] M_ball10_collision_d, M_ball10_collision_q = 1'h0;
  reg [1:0] M_ball12_collision_d, M_ball12_collision_q = 1'h0;
  reg [1:0] M_ball20_collision_d, M_ball20_collision_q = 1'h0;
  reg [1:0] M_ball21_collision_d, M_ball21_collision_q = 1'h0;
  reg M_ball_destroyed_d, M_ball_destroyed_q = 1'h0;
  reg M_ball1_destroyed_d, M_ball1_destroyed_q = 1'h0;
  reg M_ball2_destroyed_d, M_ball2_destroyed_q = 1'h0;
  localparam IDLE_ball_selected = 1'd0;
  localparam CHANGING_ball_selected = 1'd1;
  
  reg M_ball_selected_d, M_ball_selected_q = IDLE_ball_selected;
  
  wire [1-1:0] M_ball_red;
  wire [1-1:0] M_ball_green;
  wire [1-1:0] M_ball_blue;
  wire [1-1:0] M_ball_active;
  wire [1-1:0] M_ball_moving;
  reg [160-1:0] M_ball_grid;
  reg [1-1:0] M_ball_on;
  reg [1-1:0] M_ball_reset;
  ball_10 ball (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h03),
    .i_y(5'h07),
    .up(up),
    .down(down),
    .left(left),
    .right(right),
    .i_animate(i_animate),
    .grid(M_ball_grid),
    .on(M_ball_on),
    .reset(M_ball_reset),
    .red(M_ball_red),
    .green(M_ball_green),
    .blue(M_ball_blue),
    .active(M_ball_active),
    .moving(M_ball_moving)
  );
  wire [1-1:0] M_ball1_red;
  wire [1-1:0] M_ball1_green;
  wire [1-1:0] M_ball1_blue;
  wire [1-1:0] M_ball1_active;
  wire [1-1:0] M_ball1_moving;
  reg [160-1:0] M_ball1_grid;
  reg [1-1:0] M_ball1_on;
  reg [1-1:0] M_ball1_reset;
  ball_10 ball1 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h07),
    .i_y(5'h07),
    .up(up),
    .down(down),
    .left(left),
    .right(right),
    .i_animate(i_animate),
    .grid(M_ball1_grid),
    .on(M_ball1_on),
    .reset(M_ball1_reset),
    .red(M_ball1_red),
    .green(M_ball1_green),
    .blue(M_ball1_blue),
    .active(M_ball1_active),
    .moving(M_ball1_moving)
  );
  wire [1-1:0] M_ball2_red;
  wire [1-1:0] M_ball2_green;
  wire [1-1:0] M_ball2_blue;
  wire [1-1:0] M_ball2_active;
  wire [1-1:0] M_ball2_moving;
  reg [160-1:0] M_ball2_grid;
  reg [1-1:0] M_ball2_on;
  reg [1-1:0] M_ball2_reset;
  ball_10 ball2 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0c),
    .i_y(5'h03),
    .up(up),
    .down(down),
    .left(left),
    .right(right),
    .i_animate(i_animate),
    .grid(M_ball2_grid),
    .on(M_ball2_on),
    .reset(M_ball2_reset),
    .red(M_ball2_red),
    .green(M_ball2_green),
    .blue(M_ball2_blue),
    .active(M_ball2_active),
    .moving(M_ball2_moving)
  );
  wire [1-1:0] M_star_red;
  wire [1-1:0] M_star_green;
  wire [1-1:0] M_star_blue;
  wire [1-1:0] M_star_active;
  star_12 star (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h04),
    .i_y(5'h07),
    .red(M_star_red),
    .green(M_star_green),
    .blue(M_star_blue),
    .active(M_star_active)
  );
  wire [1-1:0] M_star1_red;
  wire [1-1:0] M_star1_green;
  wire [1-1:0] M_star1_blue;
  wire [1-1:0] M_star1_active;
  star_12 star1 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h05),
    .i_y(5'h07),
    .red(M_star1_red),
    .green(M_star1_green),
    .blue(M_star1_blue),
    .active(M_star1_active)
  );
  wire [1-1:0] M_star2_red;
  wire [1-1:0] M_star2_green;
  wire [1-1:0] M_star2_blue;
  wire [1-1:0] M_star2_active;
  star_12 star2 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h06),
    .i_y(5'h07),
    .red(M_star2_red),
    .green(M_star2_green),
    .blue(M_star2_blue),
    .active(M_star2_active)
  );
  wire [1-1:0] M_star3_red;
  wire [1-1:0] M_star3_green;
  wire [1-1:0] M_star3_blue;
  wire [1-1:0] M_star3_active;
  star_12 star3 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0c),
    .i_y(5'h05),
    .red(M_star3_red),
    .green(M_star3_green),
    .blue(M_star3_blue),
    .active(M_star3_active)
  );
  wire [1-1:0] M_star4_red;
  wire [1-1:0] M_star4_green;
  wire [1-1:0] M_star4_blue;
  wire [1-1:0] M_star4_active;
  star_12 star4 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0e),
    .i_y(5'h03),
    .red(M_star4_red),
    .green(M_star4_green),
    .blue(M_star4_blue),
    .active(M_star4_active)
  );
  wire [5-1:0] M_expanding_square_o_x;
  wire [5-1:0] M_expanding_square_o_y;
  wire [1-1:0] M_expanding_square_red;
  wire [1-1:0] M_expanding_square_green;
  wire [1-1:0] M_expanding_square_blue;
  wire [1-1:0] M_expanding_square_active;
  expanding_square_15 expanding_square (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h07),
    .i_y(5'h04),
    .o_x(M_expanding_square_o_x),
    .o_y(M_expanding_square_o_y),
    .red(M_expanding_square_red),
    .green(M_expanding_square_green),
    .blue(M_expanding_square_blue),
    .active(M_expanding_square_active)
  );
  wire [5-1:0] M_expanding_square1_o_x;
  wire [5-1:0] M_expanding_square1_o_y;
  wire [1-1:0] M_expanding_square1_red;
  wire [1-1:0] M_expanding_square1_green;
  wire [1-1:0] M_expanding_square1_blue;
  wire [1-1:0] M_expanding_square1_active;
  expanding_square_15 expanding_square1 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0c),
    .i_y(5'h04),
    .o_x(M_expanding_square1_o_x),
    .o_y(M_expanding_square1_o_y),
    .red(M_expanding_square1_red),
    .green(M_expanding_square1_green),
    .blue(M_expanding_square1_blue),
    .active(M_expanding_square1_active)
  );
  wire [5-1:0] M_expanding_square2_o_x;
  wire [5-1:0] M_expanding_square2_o_y;
  wire [1-1:0] M_expanding_square2_red;
  wire [1-1:0] M_expanding_square2_green;
  wire [1-1:0] M_expanding_square2_blue;
  wire [1-1:0] M_expanding_square2_active;
  expanding_square_15 expanding_square2 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0d),
    .i_y(5'h03),
    .o_x(M_expanding_square2_o_x),
    .o_y(M_expanding_square2_o_y),
    .red(M_expanding_square2_red),
    .green(M_expanding_square2_green),
    .blue(M_expanding_square2_blue),
    .active(M_expanding_square2_active)
  );
  wire [1-1:0] M_grid_red;
  wire [1-1:0] M_grid_green;
  wire [1-1:0] M_grid_blue;
  reg [160-1:0] M_grid_grid;
  grid_16 grid (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .grid(M_grid_grid),
    .red(M_grid_red),
    .green(M_grid_green),
    .blue(M_grid_blue)
  );
  
  always @* begin
    M_ball_selected_d = M_ball_selected_q;
    M_collision1_d = M_collision1_q;
    M_expandingcollision_d = M_expandingcollision_q;
    M_ball10_collision_d = M_ball10_collision_q;
    M_ball2_destroyed_d = M_ball2_destroyed_q;
    M_counter_d = M_counter_q;
    M_ball20_collision_d = M_ball20_collision_q;
    M_grid_change_d = M_grid_change_q;
    M_ball21_collision_d = M_ball21_collision_q;
    M_ball12_collision_d = M_ball12_collision_q;
    M_ball_destroyed_d = M_ball_destroyed_q;
    M_ball01_collision_d = M_ball01_collision_q;
    M_expandingcollision2_d = M_expandingcollision2_q;
    M_pixel_reg_d = M_pixel_reg_q;
    M_ball1_destroyed_d = M_ball1_destroyed_q;
    M_stars_d = M_stars_q;
    M_current_ball_d = M_current_ball_q;
    M_collision2_d = M_collision2_q;
    M_collision3_d = M_collision3_q;
    M_collision4_d = M_collision4_q;
    M_expandingcollision1_d = M_expandingcollision1_q;
    M_ball02_collision_d = M_ball02_collision_q;
    M_collision_d = M_collision_q;
    
    M_pixel_reg_d = ~M_pixel_reg_q;
    pixel_tick = (M_pixel_reg_q == 1'h0);
    grid_input = 160'h000007fc08021bfc28486f7080207fc000000000;
    M_grid_grid = M_grid_change_q;
    M_ball_grid = M_grid_change_q;
    M_ball1_grid = M_grid_change_q;
    M_ball2_grid = M_grid_change_q;
    M_counter_d = M_counter_q + 1'h1;
    if (on) begin
      M_grid_change_d = grid_input;
      M_stars_d = M_stars_q;
      M_ball_reset = 1'h0;
      M_ball1_reset = 1'h0;
      M_ball2_reset = 1'h0;
      M_current_ball_d = M_current_ball_q;
      M_ball_destroyed_d = M_ball_destroyed_q;
      M_ball1_destroyed_d = M_ball1_destroyed_q;
      M_ball2_destroyed_d = M_ball2_destroyed_q;
      M_ball_on = 1'h0;
      M_ball1_on = 1'h0;
      M_ball2_on = 1'h0;
      
      case (M_ball_selected_q)
        IDLE_ball_selected: begin
          if (M_current_ball_q == 1'h0) begin
            M_ball_on = 1'h1;
            M_ball1_on = 1'h0;
            M_ball2_on = 1'h0;
          end else begin
            if (M_current_ball_q == 1'h1) begin
              M_ball_on = 1'h0;
              M_ball1_on = 1'h1;
              M_ball2_on = 1'h0;
            end else begin
              if (M_current_ball_q == 2'h2) begin
                M_ball_on = 1'h0;
                M_ball1_on = 1'h0;
                M_ball2_on = 1'h1;
              end
            end
          end
          if (change_ball) begin
            M_counter_d = 1'h0;
            M_ball_selected_d = CHANGING_ball_selected;
          end
        end
        CHANGING_ball_selected: begin
          if (pixel_tick == 1'h1 && i_animate == 1'h1 && M_counter_q[23+0-:1] == 1'h1) begin
            if (M_ball1_destroyed_q == 1'h1 && M_ball2_destroyed_q == 1'h1) begin
              M_current_ball_d = 1'h0;
            end else begin
              if (M_ball_destroyed_q == 1'h1 && M_ball2_destroyed_q == 1'h1) begin
                M_current_ball_d = 1'h1;
              end else begin
                if (M_ball1_destroyed_q == 1'h1 && M_ball_destroyed_q == 1'h1) begin
                  M_current_ball_d = 2'h2;
                end else begin
                  if (M_ball_destroyed_q == 1'h0 && M_ball1_destroyed_q == 1'h0 && M_ball2_destroyed_q == 1'h0) begin
                    if (M_current_ball_q == 2'h2) begin
                      M_current_ball_d = 1'h0;
                    end else begin
                      M_current_ball_d = M_current_ball_q + 1'h1;
                    end
                  end else begin
                    if (M_ball2_destroyed_q == 1'h1) begin
                      if (M_current_ball_q == 1'h1) begin
                        M_current_ball_d = 1'h0;
                      end else begin
                        M_current_ball_d = M_current_ball_q + 1'h1;
                      end
                    end else begin
                      if (M_ball1_destroyed_q == 1'h1) begin
                        if (M_current_ball_q == 1'h0) begin
                          M_current_ball_d = 2'h2;
                        end else begin
                          if (M_current_ball_q == 2'h2) begin
                            M_current_ball_d = 1'h0;
                          end
                        end
                      end else begin
                        if (M_ball_destroyed_q == 1'h1) begin
                          if (M_current_ball_q == 2'h2) begin
                            M_current_ball_d = 1'h1;
                          end else begin
                            M_current_ball_d = M_current_ball_q + 1'h1;
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            M_ball_selected_d = IDLE_ball_selected;
          end
        end
      endcase
      if (M_collision_q == 1'h0) begin
        M_collision_d = M_ball_active & M_star_active | M_ball1_active & M_star_active | M_ball2_active & M_star_active;
        star_r = M_star_red;
        star_g = M_star_green;
        star_b = M_star_blue;
      end else begin
        if (M_collision_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision_d = M_collision_q + 1'h1;
          star_r = 1'h0;
          star_g = 1'h0;
          star_b = 1'h0;
        end else begin
          M_collision_d = M_collision_q;
          star_r = 1'h0;
          star_g = 1'h0;
          star_b = 1'h0;
        end
      end
      if (M_collision1_q == 1'h0) begin
        M_collision1_d = M_ball_active & M_star1_active | M_ball1_active & M_star1_active | M_ball2_active & M_star1_active;
        star1_r = M_star1_red;
        star1_g = M_star1_green;
        star1_b = M_star1_blue;
      end else begin
        if (M_collision1_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision1_d = M_collision1_q + 1'h1;
          star1_r = 1'h0;
          star1_g = 1'h0;
          star1_b = 1'h0;
        end else begin
          M_collision1_d = M_collision1_q;
          star1_r = 1'h0;
          star1_g = 1'h0;
          star1_b = 1'h0;
        end
      end
      if (M_collision2_q == 1'h0) begin
        M_collision2_d = M_ball_active & M_star2_active | M_ball1_active & M_star2_active | M_ball2_active & M_star2_active;
        star2_r = M_star2_red;
        star2_g = M_star2_green;
        star2_b = M_star2_blue;
      end else begin
        if (M_collision2_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision2_d = M_collision2_q + 1'h1;
          star2_r = 1'h0;
          star2_g = 1'h0;
          star2_b = 1'h0;
        end else begin
          M_collision2_d = M_collision2_q;
          star2_r = 1'h0;
          star2_g = 1'h0;
          star2_b = 1'h0;
        end
      end
      if (M_collision3_q == 1'h0) begin
        M_collision3_d = M_ball_active & M_star3_active | M_ball1_active & M_star3_active | M_ball2_active & M_star3_active;
        star3_r = M_star3_red;
        star3_g = M_star3_green;
        star3_b = M_star3_blue;
      end else begin
        if (M_collision3_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision3_d = M_collision3_q + 1'h1;
          star3_r = 1'h0;
          star3_g = 1'h0;
          star3_b = 1'h0;
        end else begin
          M_collision3_d = M_collision3_q;
          star3_r = 1'h0;
          star3_g = 1'h0;
          star3_b = 1'h0;
        end
      end
      if (M_collision4_q == 1'h0) begin
        M_collision4_d = M_ball_active & M_star4_active | M_ball1_active & M_star4_active | M_ball2_active & M_star4_active;
        star4_r = M_star4_red;
        star4_g = M_star4_green;
        star4_b = M_star4_blue;
      end else begin
        if (M_collision4_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision4_d = M_collision4_q + 1'h1;
          star4_r = 1'h0;
          star4_g = 1'h0;
          star4_b = 1'h0;
        end else begin
          M_collision4_d = M_collision4_q;
          star4_r = 1'h0;
          star4_g = 1'h0;
          star4_b = 1'h0;
        end
      end
      if (M_expandingcollision_q == 1'h0) begin
        M_expandingcollision_d = M_expanding_square_active & M_ball_active | M_expanding_square_active & M_ball1_active | M_expanding_square_active & M_ball2_active;
        expanding_square_r = M_expanding_square_red;
        expanding_square_g = M_expanding_square_green;
        expanding_square_b = M_expanding_square_blue;
      end else begin
        M_expandingcollision_d = M_expandingcollision_q;
        M_grid_change_d[(M_expanding_square_o_y)*16+(M_expanding_square_o_x)*1+0-:1] = 1'h1;
        expanding_square_r = 1'h0;
        expanding_square_g = 1'h0;
        expanding_square_b = 1'h0;
      end
      if (M_expandingcollision1_q == 1'h0) begin
        M_expandingcollision1_d = M_expanding_square1_active & M_ball_active | M_expanding_square1_active & M_ball1_active | M_expanding_square1_active & M_ball2_active;
        expanding_square1_r = M_expanding_square1_red;
        expanding_square1_g = M_expanding_square1_green;
        expanding_square1_b = M_expanding_square1_blue;
      end else begin
        M_expandingcollision1_d = M_expandingcollision1_q;
        M_grid_change_d[(M_expanding_square1_o_y)*16+(M_expanding_square1_o_x)*1+0-:1] = 1'h1;
        expanding_square1_r = 1'h0;
        expanding_square1_g = 1'h0;
        expanding_square1_b = 1'h0;
      end
      if (M_expandingcollision2_q == 1'h0) begin
        M_expandingcollision2_d = M_expanding_square2_active & M_ball_active | M_expanding_square2_active & M_ball1_active | M_expanding_square2_active & M_ball2_active;
        expanding_square2_r = M_expanding_square2_red;
        expanding_square2_g = M_expanding_square2_green;
        expanding_square2_b = M_expanding_square2_blue;
      end else begin
        M_expandingcollision2_d = M_expandingcollision2_q;
        M_grid_change_d[(M_expanding_square2_o_y)*16+(M_expanding_square2_o_x)*1+0-:1] = 1'h1;
        expanding_square2_r = 1'h0;
        expanding_square2_g = 1'h0;
        expanding_square2_b = 1'h0;
      end
      if (M_ball01_collision_q == 1'h0) begin
        M_ball01_collision_d = M_ball_active & M_ball1_active & M_ball_moving;
      end else begin
        M_ball01_collision_d = M_ball01_collision_q;
        M_ball1_destroyed_d = 1'h1;
      end
      if (M_ball02_collision_q == 1'h0) begin
        M_ball02_collision_d = M_ball_active & M_ball2_active & M_ball_moving;
      end else begin
        M_ball02_collision_d = M_ball02_collision_q;
        M_ball2_destroyed_d = 1'h1;
      end
      if (M_ball12_collision_q == 1'h0) begin
        M_ball12_collision_d = M_ball1_active & M_ball2_active & M_ball1_moving;
      end else begin
        M_ball12_collision_d = M_ball12_collision_q;
        M_ball2_destroyed_d = 1'h1;
      end
      if (M_ball10_collision_q == 1'h0) begin
        M_ball10_collision_d = M_ball1_active & M_ball_active & M_ball1_moving;
      end else begin
        M_ball10_collision_d = M_ball10_collision_q;
        M_ball_destroyed_d = 1'h1;
      end
      if (M_ball21_collision_q == 1'h0) begin
        M_ball21_collision_d = M_ball1_active & M_ball2_active & M_ball2_moving;
      end else begin
        M_ball21_collision_d = M_ball21_collision_q;
        M_ball1_destroyed_d = 1'h1;
      end
      if (M_ball20_collision_q == 1'h0) begin
        M_ball20_collision_d = M_ball2_active & M_ball_active & M_ball2_moving;
      end else begin
        M_ball20_collision_d = M_ball20_collision_q;
        M_ball_destroyed_d = 1'h1;
      end
      if (M_ball_destroyed_q == 1'h0) begin
        ball_r = M_ball_red;
        ball_g = M_ball_green;
        ball_b = M_ball_blue;
      end else begin
        ball_r = 1'h0;
        ball_g = 1'h0;
        ball_b = 1'h0;
      end
      if (M_ball1_destroyed_q == 1'h0) begin
        ball1_r = M_ball1_red;
        ball1_g = M_ball1_green;
        ball1_b = M_ball1_blue;
      end else begin
        ball1_r = 1'h0;
        ball1_g = 1'h0;
        ball1_b = 1'h0;
      end
      if (M_ball2_destroyed_q == 1'h0) begin
        ball2_r = M_ball2_red;
        ball2_g = M_ball2_green;
        ball2_b = M_ball2_blue;
      end else begin
        ball2_r = 1'h0;
        ball2_g = 1'h0;
        ball2_b = 1'h0;
      end
      if (M_stars_q == 3'h5) begin
        pass = 1'h1;
      end else begin
        pass = 1'h0;
      end
      r = M_grid_red | ball_r | ball1_r | ball2_r | star_r | star1_r | star2_r | star3_r | star4_r | expanding_square_r | expanding_square1_r | expanding_square1_r;
      g = M_grid_green | ball_g | ball1_g | ball2_g | star_g | star1_g | star2_g | star3_g | star4_g | expanding_square_g | expanding_square1_g | expanding_square2_g;
      b = M_grid_blue | ball_b | ball1_b | ball2_b | star_b | star1_b | star2_b | star3_b | star4_b | expanding_square_b | expanding_square1_b | expanding_square2_b;
    end else begin
      M_ball_on = 1'h0;
      M_ball1_on = 1'h0;
      M_ball2_on = 1'h0;
      r = 1'h0;
      g = 1'h0;
      b = 1'h0;
      M_collision_d = 1'h0;
      M_collision1_d = 1'h0;
      M_collision2_d = 1'h0;
      M_stars_d = 1'h0;
      M_ball_reset = 1'h1;
      M_ball1_reset = 1'h1;
      M_ball2_reset = 1'h1;
      pass = 1'h0;
      M_grid_change_d[(M_expanding_square_o_y)*16+(M_expanding_square_o_x)*1+0-:1] = 1'h0;
      M_grid_change_d[(M_expanding_square1_o_y)*16+(M_expanding_square1_o_x)*1+0-:1] = 1'h0;
      M_grid_change_d[(M_expanding_square2_o_y)*16+(M_expanding_square2_o_x)*1+0-:1] = 1'h0;
      M_expandingcollision_d = 1'h0;
      M_expandingcollision1_d = 1'h0;
      M_expandingcollision2_d = 1'h0;
      M_current_ball_d = 1'h0;
      M_ball01_collision_d = 1'h0;
      M_ball02_collision_d = 1'h0;
      M_ball12_collision_d = 1'h0;
      M_ball10_collision_d = 1'h0;
      M_ball20_collision_d = 1'h0;
      M_ball21_collision_d = 1'h0;
      M_ball_destroyed_d = 1'h0;
      M_ball1_destroyed_d = 1'h0;
      M_ball2_destroyed_d = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_pixel_reg_q <= 1'h0;
      M_grid_change_q <= 1'h0;
      M_collision_q <= 1'h0;
      M_collision1_q <= 1'h0;
      M_collision2_q <= 1'h0;
      M_collision3_q <= 1'h0;
      M_collision4_q <= 1'h0;
      M_stars_q <= 1'h0;
      M_expandingcollision_q <= 1'h0;
      M_expandingcollision1_q <= 1'h0;
      M_expandingcollision2_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_current_ball_q <= 1'h0;
      M_ball01_collision_q <= 1'h0;
      M_ball02_collision_q <= 1'h0;
      M_ball10_collision_q <= 1'h0;
      M_ball12_collision_q <= 1'h0;
      M_ball20_collision_q <= 1'h0;
      M_ball21_collision_q <= 1'h0;
      M_ball_destroyed_q <= 1'h0;
      M_ball1_destroyed_q <= 1'h0;
      M_ball2_destroyed_q <= 1'h0;
      M_ball_selected_q <= 1'h0;
    end else begin
      M_pixel_reg_q <= M_pixel_reg_d;
      M_grid_change_q <= M_grid_change_d;
      M_collision_q <= M_collision_d;
      M_collision1_q <= M_collision1_d;
      M_collision2_q <= M_collision2_d;
      M_collision3_q <= M_collision3_d;
      M_collision4_q <= M_collision4_d;
      M_stars_q <= M_stars_d;
      M_expandingcollision_q <= M_expandingcollision_d;
      M_expandingcollision1_q <= M_expandingcollision1_d;
      M_expandingcollision2_q <= M_expandingcollision2_d;
      M_counter_q <= M_counter_d;
      M_current_ball_q <= M_current_ball_d;
      M_ball01_collision_q <= M_ball01_collision_d;
      M_ball02_collision_q <= M_ball02_collision_d;
      M_ball10_collision_q <= M_ball10_collision_d;
      M_ball12_collision_q <= M_ball12_collision_d;
      M_ball20_collision_q <= M_ball20_collision_d;
      M_ball21_collision_q <= M_ball21_collision_d;
      M_ball_destroyed_q <= M_ball_destroyed_d;
      M_ball1_destroyed_q <= M_ball1_destroyed_d;
      M_ball2_destroyed_q <= M_ball2_destroyed_d;
      M_ball_selected_q <= M_ball_selected_d;
    end
  end
  
endmodule

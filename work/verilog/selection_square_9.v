/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module selection_square_9 (
    input clk,
    input rst,
    input left,
    input right,
    input up,
    input down,
    input [10:0] x,
    input [10:0] y,
    input i_animate,
    input on,
    input reset,
    output reg [4:0] o_x,
    output reg [4:0] o_y,
    output reg red,
    output reg green,
    output reg blue
  );
  
  
  
  reg [4:0] M_currentx_d, M_currentx_q = 5'h1f;
  reg [4:0] M_currenty_d, M_currenty_q = 5'h1f;
  reg M_pixel_reg_d, M_pixel_reg_q = 1'h0;
  localparam IDLE_state = 3'd0;
  localparam LEFT_state = 3'd1;
  localparam RIGHT_state = 3'd2;
  localparam UP_state = 3'd3;
  localparam DOWN_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  reg [23:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [10:0] start_x;
  
  reg [10:0] start_y;
  
  reg pixel_tick;
  
  wire [11-1:0] M_umovingsquare_o_x1;
  wire [11-1:0] M_umovingsquare_o_x2;
  wire [11-1:0] M_umovingsquare_o_y1;
  wire [11-1:0] M_umovingsquare_o_y2;
  wire [11-1:0] M_umovingsquare_o_x3;
  wire [11-1:0] M_umovingsquare_o_x4;
  wire [11-1:0] M_umovingsquare_o_y3;
  wire [11-1:0] M_umovingsquare_o_y4;
  umovingsquare_56 umovingsquare (
    .i_x(start_x),
    .i_y(start_y),
    .o_x1(M_umovingsquare_o_x1),
    .o_x2(M_umovingsquare_o_x2),
    .o_y1(M_umovingsquare_o_y1),
    .o_y2(M_umovingsquare_o_y2),
    .o_x3(M_umovingsquare_o_x3),
    .o_x4(M_umovingsquare_o_x4),
    .o_y3(M_umovingsquare_o_y3),
    .o_y4(M_umovingsquare_o_y4)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_pixel_reg_d = M_pixel_reg_q;
    M_currentx_d = M_currentx_q;
    M_counter_d = M_counter_q;
    M_currenty_d = M_currenty_q;
    
    M_pixel_reg_d = ~M_pixel_reg_q;
    pixel_tick = (M_pixel_reg_q == 1'h0);
    red = 1'h0;
    green = 1'h0;
    blue = 1'h0;
    o_x = M_currentx_q;
    o_y = M_currenty_q;
    M_counter_d = M_counter_q + 1'h1;
    if (reset) begin
      M_currentx_d = 1'h0;
      M_currenty_d = 1'h0;
      M_state_d = IDLE_state;
    end
    
    case (M_state_q)
      IDLE_state: begin
        if (M_currentx_q == 5'h1f && M_currenty_q == 5'h1f) begin
          M_currentx_d = 1'h0;
          M_currenty_d = 1'h0;
        end else begin
          M_currentx_d = M_currentx_q;
          M_currenty_d = M_currenty_q;
        end
        if (on) begin
          if (left) begin
            M_counter_d = 1'h0;
            M_state_d = LEFT_state;
          end
          if (right) begin
            M_counter_d = 1'h0;
            M_state_d = RIGHT_state;
          end
          if (up) begin
            M_counter_d = 1'h0;
            M_state_d = UP_state;
          end
          if (down) begin
            M_counter_d = 1'h0;
            M_state_d = DOWN_state;
          end
        end
      end
      LEFT_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1 && M_counter_q[23+0-:1] == 1'h1) begin
          if (M_currentx_q == 1'h0) begin
            M_currentx_d = 3'h4;
          end else begin
            M_currentx_d = M_currentx_q - 1'h1;
          end
          M_currenty_d = M_currenty_q;
          M_state_d = IDLE_state;
        end
      end
      RIGHT_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1 && M_counter_q[23+0-:1] == 1'h1) begin
          if (M_currentx_q == 3'h4) begin
            M_currentx_d = 1'h0;
          end else begin
            M_currentx_d = M_currentx_q + 1'h1;
          end
          M_currenty_d = M_currenty_q;
          M_state_d = IDLE_state;
        end
      end
      UP_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1 && M_counter_q[23+0-:1] == 1'h1) begin
          if (M_currenty_q == 1'h0) begin
            M_currenty_d = 1'h1;
          end else begin
            M_currenty_d = M_currenty_q - 1'h1;
          end
          M_currentx_d = M_currentx_q;
          M_state_d = IDLE_state;
        end
      end
      DOWN_state: begin
        if (pixel_tick == 1'h1 && i_animate == 1'h1 && M_counter_q[23+0-:1] == 1'h1) begin
          if (M_currenty_q == 1'h1) begin
            M_currenty_d = 1'h0;
          end else begin
            M_currenty_d = M_currenty_q + 1'h1;
          end
          M_currentx_d = M_currentx_q;
          M_state_d = IDLE_state;
        end
      end
    endcase
    start_x = 8'he9 + M_currentx_q * 6'h36;
    start_y = 8'hb9 + M_currenty_q * 7'h43;
    if (x > M_umovingsquare_o_x1 && x <= M_umovingsquare_o_x2 && y > M_umovingsquare_o_y1 && y <= M_umovingsquare_o_y2) begin
      red = 1'h0;
      green = 1'h0;
      blue = 1'h1;
    end else begin
      if (x > M_umovingsquare_o_x3 && x <= M_umovingsquare_o_x4 && y > M_umovingsquare_o_y3 && y <= M_umovingsquare_o_y4) begin
        red = 1'h0;
        green = 1'h0;
        blue = 1'h0;
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_currentx_q <= 5'h1f;
      M_currenty_q <= 5'h1f;
      M_pixel_reg_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_currentx_q <= M_currentx_d;
      M_currenty_q <= M_currenty_d;
      M_pixel_reg_q <= M_pixel_reg_d;
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule

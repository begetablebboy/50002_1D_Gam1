/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module level2_5 (
    input clk,
    input rst,
    input left,
    input right,
    input up,
    input down,
    input [10:0] x,
    input [10:0] y,
    input i_animate,
    input on,
    output reg r,
    output reg g,
    output reg b,
    output reg pass
  );
  
  
  
  reg [159:0] grid_input;
  
  reg star_r;
  reg star_g;
  reg star_b;
  
  reg star1_r;
  reg star1_g;
  reg star1_b;
  
  reg star2_r;
  reg star2_g;
  reg star2_b;
  
  reg star3_r;
  reg star3_g;
  reg star3_b;
  
  reg [159:0] M_grid_change_d, M_grid_change_q = 1'h0;
  reg [1:0] M_collision_d, M_collision_q = 1'h0;
  reg [1:0] M_collision1_d, M_collision1_q = 1'h0;
  reg [1:0] M_collision2_d, M_collision2_q = 1'h0;
  reg [1:0] M_collision3_d, M_collision3_q = 1'h0;
  reg [3:0] M_stars_d, M_stars_q = 1'h0;
  
  wire [1-1:0] M_ball_red;
  wire [1-1:0] M_ball_green;
  wire [1-1:0] M_ball_blue;
  wire [1-1:0] M_ball_active;
  wire [1-1:0] M_ball_moving;
  reg [160-1:0] M_ball_grid;
  reg [1-1:0] M_ball_on;
  reg [1-1:0] M_ball_reset;
  ball_10 ball (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h09),
    .i_y(5'h07),
    .up(up),
    .down(down),
    .left(left),
    .right(right),
    .i_animate(i_animate),
    .grid(M_ball_grid),
    .on(M_ball_on),
    .reset(M_ball_reset),
    .red(M_ball_red),
    .green(M_ball_green),
    .blue(M_ball_blue),
    .active(M_ball_active),
    .moving(M_ball_moving)
  );
  wire [1-1:0] M_star_red;
  wire [1-1:0] M_star_green;
  wire [1-1:0] M_star_blue;
  wire [1-1:0] M_star_active;
  star_12 star (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h06),
    .i_y(5'h03),
    .red(M_star_red),
    .green(M_star_green),
    .blue(M_star_blue),
    .active(M_star_active)
  );
  wire [1-1:0] M_star1_red;
  wire [1-1:0] M_star1_green;
  wire [1-1:0] M_star1_blue;
  wire [1-1:0] M_star1_active;
  star_12 star1 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h07),
    .i_y(5'h06),
    .red(M_star1_red),
    .green(M_star1_green),
    .blue(M_star1_blue),
    .active(M_star1_active)
  );
  wire [1-1:0] M_star2_red;
  wire [1-1:0] M_star2_green;
  wire [1-1:0] M_star2_blue;
  wire [1-1:0] M_star2_active;
  star_12 star2 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h05),
    .i_y(5'h07),
    .red(M_star2_red),
    .green(M_star2_green),
    .blue(M_star2_blue),
    .active(M_star2_active)
  );
  wire [1-1:0] M_star3_red;
  wire [1-1:0] M_star3_green;
  wire [1-1:0] M_star3_blue;
  wire [1-1:0] M_star3_active;
  star_12 star3 (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .i_x(5'h0a),
    .i_y(5'h08),
    .red(M_star3_red),
    .green(M_star3_green),
    .blue(M_star3_blue),
    .active(M_star3_active)
  );
  wire [1-1:0] M_grid_red;
  wire [1-1:0] M_grid_green;
  wire [1-1:0] M_grid_blue;
  reg [160-1:0] M_grid_grid;
  grid_16 grid (
    .clk(clk),
    .rst(rst),
    .x(x),
    .y(y),
    .grid(M_grid_grid),
    .red(M_grid_red),
    .green(M_grid_green),
    .blue(M_grid_blue)
  );
  
  always @* begin
    M_collision1_d = M_collision1_q;
    M_stars_d = M_stars_q;
    M_collision2_d = M_collision2_q;
    M_collision3_d = M_collision3_q;
    M_grid_change_d = M_grid_change_q;
    M_collision_d = M_collision_q;
    
    grid_input = 160'h000010101010020003c01e301090109010100000;
    M_grid_grid = M_grid_change_q;
    M_ball_grid = M_grid_change_q;
    if (on) begin
      M_grid_change_d = grid_input;
      M_ball_reset = 1'h0;
      M_ball_on = 1'h1;
      M_stars_d = M_stars_q;
      if (M_collision_q == 1'h0) begin
        M_collision_d = M_ball_active & M_star_active;
        star_r = M_star_red;
        star_g = M_star_green;
        star_b = M_star_blue;
      end else begin
        if (M_collision_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision_d = M_collision_q + 1'h1;
          star_r = 1'h0;
          star_g = 1'h0;
          star_b = 1'h0;
        end else begin
          M_collision_d = M_collision_q;
          star_r = 1'h0;
          star_g = 1'h0;
          star_b = 1'h0;
        end
      end
      if (M_collision1_q == 1'h0) begin
        M_collision1_d = M_ball_active & M_star1_active;
        star1_r = M_star1_red;
        star1_g = M_star1_green;
        star1_b = M_star1_blue;
      end else begin
        if (M_collision1_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision1_d = M_collision1_q + 1'h1;
          star1_r = 1'h0;
          star1_g = 1'h0;
          star1_b = 1'h0;
        end else begin
          M_collision1_d = M_collision1_q;
          star1_r = 1'h0;
          star1_g = 1'h0;
          star1_b = 1'h0;
        end
      end
      if (M_collision2_q == 1'h0) begin
        M_collision2_d = M_ball_active & M_star2_active;
        star2_r = M_star2_red;
        star2_g = M_star2_green;
        star2_b = M_star2_blue;
      end else begin
        if (M_collision2_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision2_d = M_collision2_q + 1'h1;
          star2_r = 1'h0;
          star2_g = 1'h0;
          star2_b = 1'h0;
        end else begin
          M_collision2_d = M_collision2_q;
          star2_r = 1'h0;
          star2_g = 1'h0;
          star2_b = 1'h0;
        end
      end
      if (M_collision3_q == 1'h0) begin
        M_collision3_d = M_ball_active & M_star3_active;
        star3_r = M_star3_red;
        star3_g = M_star3_green;
        star3_b = M_star3_blue;
      end else begin
        if (M_collision3_q == 1'h1) begin
          M_stars_d = M_stars_q + 1'h1;
          M_collision3_d = M_collision3_q + 1'h1;
          star3_r = 1'h0;
          star3_g = 1'h0;
          star3_b = 1'h0;
        end else begin
          M_collision3_d = M_collision3_q;
          star3_r = 1'h0;
          star3_g = 1'h0;
          star3_b = 1'h0;
        end
      end
      if (M_stars_q == 3'h4) begin
        pass = 1'h1;
      end else begin
        pass = 1'h0;
      end
      r = M_grid_red | M_ball_red | star_r | star1_r | star2_r | star3_r;
      g = M_grid_green | M_ball_green | star_g | star1_g | star2_g | star3_g;
      b = M_grid_blue | M_ball_blue | star_b | star1_b | star2_b | star3_b;
    end else begin
      M_ball_on = 1'h0;
      r = 1'h0;
      g = 1'h0;
      b = 1'h0;
      M_collision_d = 1'h0;
      M_collision1_d = 1'h0;
      M_collision2_d = 1'h0;
      M_collision3_d = 1'h0;
      M_stars_d = 1'h0;
      M_ball_reset = 1'h1;
      pass = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_grid_change_q <= 1'h0;
      M_collision_q <= 1'h0;
      M_collision1_q <= 1'h0;
      M_collision2_q <= 1'h0;
      M_collision3_q <= 1'h0;
      M_stars_q <= 1'h0;
    end else begin
      M_grid_change_q <= M_grid_change_d;
      M_collision_q <= M_collision_d;
      M_collision1_q <= M_collision1_d;
      M_collision2_q <= M_collision2_d;
      M_collision3_q <= M_collision3_d;
      M_stars_q <= M_stars_d;
    end
  end
  
endmodule

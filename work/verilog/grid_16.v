/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     D_WIDTH = 640
     D_HEIGHT = 480
*/
module grid_16 (
    input clk,
    input rst,
    input [159:0] grid,
    input [10:0] x,
    input [10:0] y,
    output reg red,
    output reg green,
    output reg blue
  );
  
  localparam D_WIDTH = 10'h280;
  localparam D_HEIGHT = 9'h1e0;
  
  
  reg [4:0] M_i_d, M_i_q = 1'h0;
  reg [4:0] M_j_d, M_j_q = 1'h0;
  
  wire [11-1:0] M_square_o_x1;
  wire [11-1:0] M_square_o_x2;
  wire [11-1:0] M_square_o_y1;
  wire [11-1:0] M_square_o_y2;
  wire [11-1:0] M_square_o_x3;
  wire [11-1:0] M_square_o_x4;
  wire [11-1:0] M_square_o_y3;
  wire [11-1:0] M_square_o_y4;
  reg [11-1:0] M_square_i_x;
  reg [11-1:0] M_square_i_y;
  umovingsquare_64 square (
    .i_x(M_square_i_x),
    .i_y(M_square_i_y),
    .o_x1(M_square_o_x1),
    .o_x2(M_square_o_x2),
    .o_y1(M_square_o_y1),
    .o_y2(M_square_o_y2),
    .o_x3(M_square_o_x3),
    .o_x4(M_square_o_x4),
    .o_y3(M_square_o_y3),
    .o_y4(M_square_o_y4)
  );
  
  wire [11-1:0] M_square2_o_x1;
  wire [11-1:0] M_square2_o_x2;
  wire [11-1:0] M_square2_o_y1;
  wire [11-1:0] M_square2_o_y2;
  wire [11-1:0] M_square2_o_x3;
  wire [11-1:0] M_square2_o_x4;
  wire [11-1:0] M_square2_o_y3;
  wire [11-1:0] M_square2_o_y4;
  reg [11-1:0] M_square2_i_x;
  reg [11-1:0] M_square2_i_y;
  umovingsquare_64 square2 (
    .i_x(M_square2_i_x),
    .i_y(M_square2_i_y),
    .o_x1(M_square2_o_x1),
    .o_x2(M_square2_o_x2),
    .o_y1(M_square2_o_y1),
    .o_y2(M_square2_o_y2),
    .o_x3(M_square2_o_x3),
    .o_x4(M_square2_o_x4),
    .o_y3(M_square2_o_y3),
    .o_y4(M_square2_o_y4)
  );
  
  reg sq_a;
  reg sq_b;
  
  always @* begin
    M_j_d = M_j_q;
    M_i_d = M_i_q;
    
    red = 1'h0;
    green = 1'h0;
    blue = 1'h0;
    M_square_i_x = 5'h13 + M_i_q * 6'h28;
    M_square_i_y = 5'h13 + M_j_q * 6'h28;
    M_square2_i_x = 5'h13 + (M_i_q + 1'h1) * 6'h28;
    M_square2_i_y = 5'h13 + (M_j_q + 1'h1) * 6'h28;
    if (x == M_square_o_x4) begin
      if (M_i_q == 4'hf) begin
        if (y == M_square_o_y4) begin
          if (M_j_q == 4'h9) begin
            M_j_d = 1'h0;
          end else begin
            M_j_d = M_j_q + 1'h1;
          end
        end
        M_i_d = 1'h0;
      end else begin
        M_i_d = M_i_q + 1'h1;
      end
    end
    if (grid[(M_j_q)*16+(M_i_q)*1+0-:1] == 1'h1) begin
      sq_a = ((x > M_square_o_x1) & (y > M_square_o_y1) & (x <= M_square_o_x2) & (y <= M_square_o_y2)) ? 1'h1 : 1'h0;
      sq_b = ((x > M_square_o_x3) & (y > M_square_o_y3) & (x < M_square_o_x4) & (y < M_square_o_y4)) ? 1'h1 : 1'h0;
      red = 1'h0;
      green = sq_b;
      blue = sq_b;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_i_q <= 1'h0;
      M_j_q <= 1'h0;
    end else begin
      M_i_q <= M_i_d;
      M_j_q <= M_j_d;
    end
  end
  
endmodule
